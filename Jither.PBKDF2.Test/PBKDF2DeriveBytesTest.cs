using System.Security.Cryptography;
using System.Text;
using NUnit.Framework;

namespace Jither.PBKDF2.Test
{
    [TestFixture]
    public class PBKDF2DeriveBytesTest
    {
        private PBKDF2DeriveBytes GetProvider<T>(string input, string salt, long iterationCount) where T : HMAC
        {
            byte[] inputBytes = Encoding.ASCII.GetBytes(input);
            byte[] saltBytes = Encoding.ASCII.GetBytes(salt);
            return new PBKDF2DeriveBytes(new HMACPseudoRandomFunction<T>(inputBytes), saltBytes, iterationCount);
        }

        // A few rudimentary tests of DeriveBytes contract

        [Test]
        public void repeated_getBytes_should_continue_stream()
        {
            var provider = GetProvider<HMACSHA1>("passwordPASSWORDpassword", "saltSALTsaltSALTsaltSALTsaltSALTsalt",
                4096);
            Assert.AreEqual(new byte[] {0x3d, 0x2e, 0xec, 0x4f, 0xe4, 0x1c, 0x84, 0x9b}, provider.GetBytes(8));
            Assert.AreEqual(new byte[] {0x80, 0xc8, 0xd8, 0x36, 0x62, 0xc0, 0xe4, 0x4a}, provider.GetBytes(8));
            Assert.AreEqual(new byte[] {0x8b, 0x29, 0x1a, 0x96, 0x4c, 0xf2, 0xf0, 0x70, 0x38}, provider.GetBytes(9));
        }

        [Test]
        public void reset_should_clear_state()
        {
            var provider = GetProvider<HMACSHA1>("passwordPASSWORDpassword", "saltSALTsaltSALTsaltSALTsaltSALTsalt",
                4096);
            Assert.AreEqual(new byte[] {0x3d, 0x2e, 0xec, 0x4f, 0xe4, 0x1c, 0x84, 0x9b}, provider.GetBytes(8));
            Assert.AreEqual(new byte[] {0x80, 0xc8, 0xd8, 0x36, 0x62, 0xc0, 0xe4, 0x4a}, provider.GetBytes(8));
            Assert.AreEqual(new byte[] {0x8b, 0x29, 0x1a, 0x96, 0x4c, 0xf2, 0xf0, 0x70, 0x38}, provider.GetBytes(9));

            provider.Reset();

            Assert.AreEqual(new byte[] {0x3d, 0x2e, 0xec, 0x4f, 0xe4, 0x1c, 0x84, 0x9b}, provider.GetBytes(8));
            Assert.AreEqual(new byte[] {0x80, 0xc8, 0xd8, 0x36, 0x62, 0xc0, 0xe4, 0x4a}, provider.GetBytes(8));
            Assert.AreEqual(new byte[] {0x8b, 0x29, 0x1a, 0x96, 0x4c, 0xf2, 0xf0, 0x70, 0x38}, provider.GetBytes(9));
        }


        // HMAC SHA-1 test vectors from RFC 6070

        [Test]
        public void sha1_test_vector1()
        {
            var provider = GetProvider<HMACSHA1>("password", "salt", 1);
            Assert.AreEqual(
                new byte[]
                {
                    0x0c, 0x60, 0xc8, 0x0f, 0x96, 0x1f, 0x0e, 0x71,
                    0xf3, 0xa9, 0xb5, 0x24, 0xaf, 0x60, 0x12, 0x06,
                    0x2f, 0xe0, 0x37, 0xa6
                },
                provider.GetBytes(20)
                );
        }

        [Test]
        public void sha1_test_vector2()
        {
            var provider = GetProvider<HMACSHA1>("password", "salt", 2);
            Assert.AreEqual(
                new byte[]
                {
                    0xea, 0x6c, 0x01, 0x4d, 0xc7, 0x2d, 0x6f, 0x8c,
                    0xcd, 0x1e, 0xd9, 0x2a, 0xce, 0x1d, 0x41, 0xf0,
                    0xd8, 0xde, 0x89, 0x57
                },
                provider.GetBytes(20)
                );
        }

        [Test]
        public void sha1_test_vector3()
        {
            var provider = GetProvider<HMACSHA1>("password", "salt", 4096);
            Assert.AreEqual(
                new byte[]
                {
                    0x4b, 0x00, 0x79, 0x01, 0xb7, 0x65, 0x48, 0x9a,
                    0xbe, 0xad, 0x49, 0xd9, 0x26, 0xf7, 0x21, 0xd0,
                    0x65, 0xa4, 0x29, 0xc1
                },
                provider.GetBytes(20)
                );
        }

        [Test]
        [Category("LongRunning")]
        public void sha1_test_vector4()
        {
            var provider = GetProvider<HMACSHA1>("password", "salt", 16777216);
            Assert.AreEqual(
                new byte[]
                {
                    0xee, 0xfe, 0x3d, 0x61, 0xcd, 0x4d, 0xa4, 0xe4,
                    0xe9, 0x94, 0x5b, 0x3d, 0x6b, 0xa2, 0x15, 0x8c,
                    0x26, 0x34, 0xe9, 0x84
                },
                provider.GetBytes(20)
                );
        }

        [Test]
        public void sha1_test_vector5()
        {
            var provider = GetProvider<HMACSHA1>("passwordPASSWORDpassword", "saltSALTsaltSALTsaltSALTsaltSALTsalt",
                4096);
            Assert.AreEqual(
                new byte[]
                {
                    0x3d, 0x2e, 0xec, 0x4f, 0xe4, 0x1c, 0x84, 0x9b,
                    0x80, 0xc8, 0xd8, 0x36, 0x62, 0xc0, 0xe4, 0x4a,
                    0x8b, 0x29, 0x1a, 0x96, 0x4c, 0xf2, 0xf0, 0x70,
                    0x38
                },
                provider.GetBytes(25)
                );
        }

        [Test]
        public void sha1_test_vector6()
        {
            var provider = GetProvider<HMACSHA1>("pass\0word", "sa\0lt", 4096);
            Assert.AreEqual(
                new byte[]
                {
                    0x56, 0xfa, 0x6a, 0xa7, 0x55, 0x48, 0x09, 0x9d,
                    0xcc, 0x37, 0xd7, 0xf0, 0x34, 0x25, 0xe0, 0xc3
                },
                provider.GetBytes(16)
                );
        }

        // HMAC SHA256 test vectors from http://stackoverflow.com/a/5136918/1169696

        [Test]
        public void sha256_test_vector1()
        {
            var provider = GetProvider<HMACSHA256>("password", "salt", 1);
            Assert.AreEqual(
                new byte[]
                {
                    0x12, 0x0f, 0xb6, 0xcf, 0xfc, 0xf8, 0xb3, 0x2c,
                    0x43, 0xe7, 0x22, 0x52, 0x56, 0xc4, 0xf8, 0x37,
                    0xa8, 0x65, 0x48, 0xc9, 0x2c, 0xcc, 0x35, 0x48,
                    0x08, 0x05, 0x98, 0x7c, 0xb7, 0x0b, 0xe1, 0x7b
                },
                provider.GetBytes(32)
                );
        }

        [Test]
        public void sha256_test_vector2()
        {
            var provider = GetProvider<HMACSHA256>("password", "salt", 2);
            Assert.AreEqual(
                new byte[]
                {
                    0xae, 0x4d, 0x0c, 0x95, 0xaf, 0x6b, 0x46, 0xd3,
                    0x2d, 0x0a, 0xdf, 0xf9, 0x28, 0xf0, 0x6d, 0xd0,
                    0x2a, 0x30, 0x3f, 0x8e, 0xf3, 0xc2, 0x51, 0xdf,
                    0xd6, 0xe2, 0xd8, 0x5a, 0x95, 0x47, 0x4c, 0x43
                },
                provider.GetBytes(32)
                );
        }

        [Test]
        public void sha256_test_vector3()
        {
            var provider = GetProvider<HMACSHA256>("password", "salt", 4096);
            Assert.AreEqual(
                new byte[]
                {
                    0xc5, 0xe4, 0x78, 0xd5, 0x92, 0x88, 0xc8, 0x41,
                    0xaa, 0x53, 0x0d, 0xb6, 0x84, 0x5c, 0x4c, 0x8d,
                    0x96, 0x28, 0x93, 0xa0, 0x01, 0xce, 0x4e, 0x11,
                    0xa4, 0x96, 0x38, 0x73, 0xaa, 0x98, 0x13, 0x4a
                },
                provider.GetBytes(32)
                );
        }

        [Test]
        [Category("LongRunning")]
        public void sha256_test_vector4()
        {
            var provider = GetProvider<HMACSHA256>("password", "salt", 16777216);
            Assert.AreEqual(
                new byte[]
                {
                    0xcf, 0x81, 0xc6, 0x6f, 0xe8, 0xcf, 0xc0, 0x4d,
                    0x1f, 0x31, 0xec, 0xb6, 0x5d, 0xab, 0x40, 0x89,
                    0xf7, 0xf1, 0x79, 0xe8, 0x9b, 0x3b, 0x0b, 0xcb,
                    0x17, 0xad, 0x10, 0xe3, 0xac, 0x6e, 0xba, 0x46
                },
                provider.GetBytes(32)
                );
        }

        [Test]
        public void sha256_test_vector5()
        {
            // TODO: This may not be entirely ideal - the relation between password length, salt length, key length, block length etc. is not equivalent to RFC 6070
            var provider = GetProvider<HMACSHA256>("passwordPASSWORDpassword", "saltSALTsaltSALTsaltSALTsaltSALTsalt",
                4096);
            Assert.AreEqual(
                new byte[]
                {
                    0x34, 0x8c, 0x89, 0xdb, 0xcb, 0xd3, 0x2b, 0x2f,
                    0x32, 0xd8, 0x14, 0xb8, 0x11, 0x6e, 0x84, 0xcf,
                    0x2b, 0x17, 0x34, 0x7e, 0xbc, 0x18, 0x00, 0x18,
                    0x1c, 0x4e, 0x2a, 0x1f, 0xb8, 0xdd, 0x53, 0xe1,
                    0xc6, 0x35, 0x51, 0x8c, 0x7d, 0xac, 0x47, 0xe9
                },
                provider.GetBytes(40)
                );
        }

        [Test]
        public void sha256_test_vector6()
        {
            var provider = GetProvider<HMACSHA256>("pass\0word", "sa\0lt", 4096);
            Assert.AreEqual(
                new byte[]
                {
                    0x89, 0xb6, 0x9d, 0x05, 0x16, 0xf8, 0x29, 0x89,
                    0x3c, 0x69, 0x62, 0x26, 0x65, 0x0a, 0x86, 0x87
                },
                provider.GetBytes(16)
                );
        }

        // HMAC SHA512 test vectors from http://stackoverflow.com/questions/15593184/pbkdf2-hmac-sha-512-test-vectors

        [Test]
        public void sha512_test_vector1()
        {
            var provider = GetProvider<HMACSHA512>("password", "salt", 1);
            Assert.AreEqual(
                new byte[]
                {
                    0x86, 0x7f, 0x70, 0xcf, 0x1a, 0xde, 0x02, 0xcf,
                    0xf3, 0x75, 0x25, 0x99, 0xa3, 0xa5, 0x3d, 0xc4,
                    0xaf, 0x34, 0xc7, 0xa6, 0x69, 0x81, 0x5a, 0xe5,
                    0xd5, 0x13, 0x55, 0x4e, 0x1c, 0x8c, 0xf2, 0x52,
                    0xc0, 0x2d, 0x47, 0x0a, 0x28, 0x5a, 0x05, 0x01,
                    0xba, 0xd9, 0x99, 0xbf, 0xe9, 0x43, 0xc0, 0x8f,
                    0x05, 0x02, 0x35, 0xd7, 0xd6, 0x8b, 0x1d, 0xa5,
                    0x5e, 0x63, 0xf7, 0x3b, 0x60, 0xa5, 0x7f, 0xce
                },
                provider.GetBytes(64)
                );
        }

        [Test]
        public void sha512_test_vector2()
        {
            var provider = GetProvider<HMACSHA512>("password", "salt", 2);
            Assert.AreEqual(
                new byte[]
                {
                    0xe1, 0xd9, 0xc1, 0x6a, 0xa6, 0x81, 0x70, 0x8a,
                    0x45, 0xf5, 0xc7, 0xc4, 0xe2, 0x15, 0xce, 0xb6,
                    0x6e, 0x01, 0x1a, 0x2e, 0x9f, 0x00, 0x40, 0x71,
                    0x3f, 0x18, 0xae, 0xfd, 0xb8, 0x66, 0xd5, 0x3c,
                    0xf7, 0x6c, 0xab, 0x28, 0x68, 0xa3, 0x9b, 0x9f,
                    0x78, 0x40, 0xed, 0xce, 0x4f, 0xef, 0x5a, 0x82,
                    0xbe, 0x67, 0x33, 0x5c, 0x77, 0xa6, 0x06, 0x8e,
                    0x04, 0x11, 0x27, 0x54, 0xf2, 0x7c, 0xcf, 0x4e
                },
                provider.GetBytes(64)
                );
        }

        [Test]
        public void sha512_test_vector3()
        {
            var provider = GetProvider<HMACSHA512>("password", "salt", 4096);
            Assert.AreEqual(
                new byte[]
                {
                    0xd1, 0x97, 0xb1, 0xb3, 0x3d, 0xb0, 0x14, 0x3e,
                    0x01, 0x8b, 0x12, 0xf3, 0xd1, 0xd1, 0x47, 0x9e,
                    0x6c, 0xde, 0xbd, 0xcc, 0x97, 0xc5, 0xc0, 0xf8,
                    0x7f, 0x69, 0x02, 0xe0, 0x72, 0xf4, 0x57, 0xb5,
                    0x14, 0x3f, 0x30, 0x60, 0x26, 0x41, 0xb3, 0xd5,
                    0x5c, 0xd3, 0x35, 0x98, 0x8c, 0xb3, 0x6b, 0x84,
                    0x37, 0x60, 0x60, 0xec, 0xd5, 0x32, 0xe0, 0x39,
                    0xb7, 0x42, 0xa2, 0x39, 0x43, 0x4a, 0xf2, 0xd5
                },
                provider.GetBytes(64)
                );
        }

        [Test]
        public void sha512_test_vector4()
        {
            var provider = GetProvider<HMACSHA512>("passwordPASSWORDpassword", "saltSALTsaltSALTsaltSALTsaltSALTsalt", 4096);
            Assert.AreEqual(
                new byte[]
                {
                    0x8c, 0x05, 0x11, 0xf4, 0xc6, 0xe5, 0x97, 0xc6,
                    0xac, 0x63, 0x15, 0xd8, 0xf0, 0x36, 0x2e, 0x22,
                    0x5f, 0x3c, 0x50, 0x14, 0x95, 0xba, 0x23, 0xb8,
                    0x68, 0xc0, 0x05, 0x17, 0x4d, 0xc4, 0xee, 0x71,
                    0x11, 0x5b, 0x59, 0xf9, 0xe6, 0x0c, 0xd9, 0x53,
                    0x2f, 0xa3, 0x3e, 0x0f, 0x75, 0xae, 0xfe, 0x30,
                    0x22, 0x5c, 0x58, 0x3a, 0x18, 0x6c, 0xd8, 0x2b,
                    0xd4, 0xda, 0xea, 0x97, 0x24, 0xa3, 0xd3, 0xb8
                },
                provider.GetBytes(64)
                );
        }
    }
}
